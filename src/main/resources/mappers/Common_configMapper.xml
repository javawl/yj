<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yj.dao.Common_configMapper" >
  <resultMap id="BaseResultMap" type="com.yj.pojo.Common_config" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="start_page" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="daily_pic" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="get_home_page_portrait_max" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, start_page, daily_pic, get_home_page_portrait_max
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from common_config
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from common_config
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yj.pojo.Common_config" >
    insert into common_config (id, start_page, daily_pic, 
      get_home_page_portrait_max)
    values (#{id,jdbcType=INTEGER}, #{startPage,jdbcType=VARCHAR}, #{dailyPic,jdbcType=VARCHAR}, 
      #{getHomePagePortraitMax,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yj.pojo.Common_config" >
    insert into common_config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="startPage != null" >
        start_page,
      </if>
      <if test="dailyPic != null" >
        daily_pic,
      </if>
      <if test="getHomePagePortraitMax != null" >
        get_home_page_portrait_max,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="startPage != null" >
        #{startPage,jdbcType=VARCHAR},
      </if>
      <if test="dailyPic != null" >
        #{dailyPic,jdbcType=VARCHAR},
      </if>
      <if test="getHomePagePortraitMax != null" >
        #{getHomePagePortraitMax,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yj.pojo.Common_config" >
    update common_config
    <set >
      <if test="startPage != null" >
        start_page = #{startPage,jdbcType=VARCHAR},
      </if>
      <if test="dailyPic != null" >
        daily_pic = #{dailyPic,jdbcType=VARCHAR},
      </if>
      <if test="getHomePagePortraitMax != null" >
        get_home_page_portrait_max = #{getHomePagePortraitMax,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yj.pojo.Common_config" >
    update common_config
    set start_page = #{startPage,jdbcType=VARCHAR},
      daily_pic = #{dailyPic,jdbcType=VARCHAR},
      get_home_page_portrait_max = #{getHomePagePortraitMax,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>



  <!--下面的是自己添加的-->
  <update id="changeLastLogin" parameterType="string">
    UPDATE `user`
    set last_login = #{time}
    WHERE id = #{id}
  </update>


  <update id="changeRetentionFlag">
    UPDATE `user`
    set retention_flag = #{flag}
    WHERE id = #{id}
  </update>

  <update id="changeDauAndTimes">
    UPDATE data_info
    set `daily_app_start` = daily_app_start + #{daily_app_start},
    `dau` = dau + #{dau}
    WHERE set_time = #{set_time}
  </update>

  <update id="changeMAU">
    UPDATE data_info
    set `mau` = mau + #{mau}
    WHERE set_time > #{set_time}
  </update>

  <update id="change_draw_win_status">
    UPDATE lottery_draw_contestants
    set `status` = #{status}
    WHERE user_id = #{user_id}
    AND lottery_draw_id = #{lottery_draw_id}
  </update>

  <update id="changeRetention">
    UPDATE data_info
    set `two_day_retention` = two_day_retention + #{two_day_retention},
    `seven_day_retention` = seven_day_retention + #{seven_day_retention},
    `month_retention` = month_retention + #{month_retention}
    WHERE set_time = #{set_time}
  </update>

  <insert id="insertDataInfo">
    INSERT INTO data_info (daily_app_start, dau, mau, set_time)
    values (#{daily_app_start}, #{dau}, IFNULL((SELECT max_mau FROM (SELECT MAX(`mau`) as max_mau FROM data_info WHERE set_time >= #{mau_time}) tb),0), #{set_time})
  </insert>

  <insert id="insertWelfareService" parameterType="string">
    INSERT INTO welfare_service (pic, url, st, et)
    values (#{pic}, #{url}, #{st}, #{et})
  </insert>

  <insert id="insertLotteryDraw" parameterType="string">
    INSERT INTO lottery_draw (prize, prize_pic, prize_tomorrow, prize_tomorrow_pic, upload_time, set_time)
    values (#{prize}, #{prize_pic}, #{prize_tomorrow}, #{prize_tomorrow_pic}, #{upload_time}, #{et})
  </insert>

  <insert id="insertMedallionHelp" parameterType="string">
    INSERT INTO medallion (user_id, help_user_id, word_challenge_contestants_id, flag, set_time)
    values (#{user_id}, #{help_user_id}, #{word_challenge_contestants_id}, #{flag}, #{set_time})
  </insert>

  <insert id="insertWordChallengeContestantsReal" parameterType="string">
    INSERT INTO word_challenge_contestants (user_id,word_challenge_id,set_time,`virtual`,`insist_day`)
    values (#{user_id},#{word_challenge_id},#{set_time},0,0)
  </insert>


  <insert id="insertWithDrawCash" parameterType="string">
    INSERT INTO withdraw_cash (user_id,money,`type`,`name`,`account_number`,set_time)
    values (#{user_id},#{money},#{type},#{name},#{account_number},#{set_time})
  </insert>

  <insert id="insertWordChallenge" parameterType="string">
    INSERT INTO word_challenge (st, et, upper_limit, set_time, periods)
    values (#{st}, #{et}, #{upper_limit}, #{set_time}, IFNULL((SELECT max_periods FROM (SELECT MAX(`periods`) as max_periods FROM word_challenge) tb),0)+1)
  </insert>

  <insert id="insertVirtualId" parameterType="string">
    INSERT INTO virtual_user (user_id)
    values (#{user_id})
  </insert>


  <insert id="insertVirtualChallengeId" parameterType="string">
    INSERT INTO virtual_user_challenge (user_id)
    values (#{user_id})
  </insert>


  <insert id="insertLotteryDrawReal" parameterType="string">
    INSERT INTO lottery_draw_contestants (user_id,lottery_draw_id,set_time,`virtual`)
    values (#{user_id},#{lottery_draw_id},#{set_time},#{virtual})
  </insert>

  <insert id="insertBank" parameterType="string">
    INSERT INTO bank (description,money,set_time)
    values (#{description},#{money},#{set_time})
  </insert>

  <insert id="insertBill" parameterType="string">
    INSERT INTO bill (user_id,statement,bill,set_time,with_draw_cash_id)
    values (#{user_id},#{statement},#{bill},#{set_time},#{with_draw_cash_id})
  </insert>

  <insert id="insertWordChallengeInviteRelation" parameterType="string">
    INSERT INTO word_challenge_invite_relation (user_id,invited_user_id,word_challenge_id,set_time)
    values (#{user_id},#{invited_user_id},#{word_challenge_id},#{set_time})
  </insert>

  <insert id="insertWordChallengeContestants" parameterType="string">
    INSERT INTO word_challenge_contestants (user_id,word_challenge_id,set_time,`virtual`,`insist_day`)
    values (#{user_id},#{word_challenge_id},#{set_time},#{virtual},30)
  </insert>

  <insert id="insertTemplateFormId" parameterType="string">
    INSERT INTO template_msg (user_id,wechat,form_id,set_time)
    values (#{user_id},#{wechat},#{form_id},#{set_time})
  </insert>

  <insert id="insertPayRecord" parameterType="string">
    INSERT INTO pay_record (user_id,`type`,set_time)
    values (#{user_id},#{type},#{set_time})
  </insert>

  <select id="getDailyAdminInfo" resultType="map">
    SELECT  *
    FROM `data_info`
    ORDER BY set_time desc
    LIMIT #{start},#{size}
  </select>


  <select id="showAuthorInfo" resultType="map">
    SELECT id,username,portrait,gender,personality_signature
    FROM `user`
    WHERE id IN (SELECT  user_id as id
    FROM `author_info`)
    LIMIT #{start},#{size}
  </select>

  <select id="showVirtualUser" resultType="map">
    SELECT id,username,portrait,gender,personality_signature
    FROM `user`
    WHERE id IN (SELECT  user_id as id
    FROM `virtual_user`)
    LIMIT #{start},#{size}
  </select>

  <select id="showVirtualUserChallenge" resultType="map">
    SELECT id,username,portrait,gender,personality_signature
    FROM `user`
    WHERE id IN (SELECT  user_id as id
    FROM `virtual_user_challenge`)
    LIMIT #{start},#{size}
  </select>

  <select id="getTop100VirtualUserChallenge" resultType="map">
    SELECT  user_id as id
    FROM `virtual_user_challenge`
    LIMIT 100
  </select>

  <select id="showLotteryDraw" resultType="map">
    SELECT *
    FROM `lottery_draw`
    WHERE id = #{id}
  </select>

  <select id="showWordChallenge" resultType="map">
    SELECT *
    FROM `word_challenge`
    WHERE id = #{id}
  </select>


  <select id="getAllVirtualUser" resultType="map">
    SELECT user_id
    FROM `virtual_user`
  </select>

  <select id="getAllVirtualUserChallenge" resultType="map" parameterType="int">
    SELECT user_id
    FROM `virtual_user_challenge`
    order by rand() limit #{number}
  </select>

  <select id="getAllWxUser" resultType="map">
    SELECT id,my_plan,last_login
    FROM `user`
    WHERE wechat is NOT NULL
    AND (`last_login` &lt; #{last_login}
    OR `last_login` is NULL)
    AND whether_template = 1
  </select>


  <select id="getAllAppointmentWxUser" resultType="map">
    SELECT id,my_plan,last_login
    FROM `user`
    WHERE wechat is NOT NULL
    AND whether_reminder = 1
  </select>

  <select id="getChallengeSuccessWxUser" resultType="map">
    SELECT id,my_plan,last_login
    FROM `user`
    WHERE wechat is NOT NULL
    AND whether_challenge_success = 1
  </select>


  <select id="getChallengeFailWxUser" resultType="map">
    SELECT id,my_plan,last_login
    FROM `user`
    WHERE wechat is NOT NULL
    AND whether_challenge_fail = 1
  </select>

  <select id="getChallengeInviteWxUser" resultType="map">
    SELECT id,my_plan,last_login
    FROM `user`
    WHERE wechat is NOT NULL
    AND whether_invite_challenge_success = 1
  </select>

  <select id="getAllDrawWxUser" resultType="map">
    SELECT `user`.id
    FROM `user`,lottery_draw_contestants
    WHERE `user`.wechat is NOT NULL
    AND `user`.id = lottery_draw_contestants.user_id
    AND lottery_draw_contestants.lottery_draw_id = #{lottery_draw_id}
  </select>

  <select id="getTmpInfo" resultType="map">
    SELECT id,form_id,wechat
    FROM `template_msg`
    WHERE user_id = #{user_id}
    AND set_time > #{set_time}
    ORDER BY set_time ASC
    LIMIT 1
  </select>

  <select id="getUserOpenid" resultType="string">
    SELECT wechat
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="getUserWhetherReminder" resultType="string">
    SELECT whether_reminder
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="getUserWhetherTemplate" resultType="string">
    SELECT whether_template
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="showLotteryDrawWinner" resultType="map" parameterType="string">
    SELECT id,username,portrait,tb.virtual
    FROM `user`,(SELECT lottery_draw_contestants.user_id,lottery_draw_contestants.virtual
                FROM `lottery_draw_contestants`
                WHERE lottery_draw_id = #{id}
                AND `status` = 1) tb
    WHERE `user`.id = tb.user_id
  </select>


  <select id="showWordChallengeWinner" resultType="map" parameterType="string">
    SELECT id,username,portrait,tb.virtual,tb.insist_day
    FROM `user`,(SELECT word_challenge_contestants.user_id,word_challenge_contestants.virtual,word_challenge_contestants.insist_day
                FROM `word_challenge_contestants`
                WHERE word_challenge_id = #{id}
                AND `insist_day` >= 28) tb
    WHERE `user`.id = tb.user_id
  </select>


  <select id="getWordChallengeBeginRemind" resultType="map" parameterType="string">
    SELECT word_challenge_contestants.user_id,tb.periods
    FROM `word_challenge_contestants`,(SELECT id,periods
                FROM `word_challenge`
                WHERE `word_challenge`.st &lt; #{during_end}
                AND `word_challenge`.st > #{during_begin}) tb
    WHERE `word_challenge_contestants`.word_challenge_id = tb.id
  </select>


  <select id="getInBeginningWordChallengeUser" resultType="map" parameterType="string">
    SELECT word_challenge_contestants.user_id,tb.periods
    FROM `word_challenge_contestants`,(SELECT id,periods
                FROM `word_challenge`
                WHERE `word_challenge`.st &lt; #{now_time}
                AND `word_challenge`.et > #{now_time}) tb
    WHERE `word_challenge_contestants`.word_challenge_id = tb.id
  </select>

  <select id="getBeginningWordChallenge" resultType="map" parameterType="string">
    SELECT id,periods
    FROM `word_challenge`
    WHERE `word_challenge`.st &lt; #{now_time}
    AND `word_challenge`.et > #{now_time}
  </select>

  <select id="showLotteryDrawContestantsVirtual" resultType="map" parameterType="string">
    SELECT id,username,portrait
    FROM `user`
    WHERE id IN
          (SELECT user_id
           FROM `virtual_user`
           WHERE user_id IN
          (SELECT user_id
           FROM `lottery_draw_contestants`
           WHERE lottery_draw_id = #{id}))
  </select>

  <select id="showWordChallengeContestantsVirtual" resultType="map" parameterType="string">
    SELECT `user`.id,`user`.username,`user`.portrait,tb.*
    FROM `user`,(SELECT user_id,insist_day,reward
                 FROM `word_challenge_contestants`
                 WHERE word_challenge_id = #{id}
                   AND `virtual` = 1) tb
    WHERE `user`.id = tb.user_id
  </select>

  <select id="showLotteryDrawContestantsReal" resultType="map" parameterType="string">
    SELECT id,username,portrait
    FROM `user`
    WHERE id IN
          (SELECT user_id
           FROM `lottery_draw_contestants`
           WHERE lottery_draw_id = #{id}
           AND `virtual` = 0)
  </select>

  <select id="showWordChallengeContestantsReal" resultType="map" parameterType="string">
    SELECT `user`.id,`user`.username,`user`.portrait,tb.*
    FROM `user`,(SELECT user_id,insist_day,reward
                 FROM `word_challenge_contestants`
                 WHERE word_challenge_id = #{id}
                   AND `virtual` = 0) tb
    WHERE `user`.id = tb.user_id
  </select>

  <select id="getCommonConfig" resultType="map">
    SELECT  *
    FROM `common_config`
    WHERE id = 1
  </select>

  <select id="getWordChallengeById" resultType="map">
    SELECT  *
    FROM `word_challenge`
    WHERE id = #{word_challenge_id}
  </select>

  <select id="getUserWinStatus" resultType="string" parameterType="string">
    SELECT status
    FROM `lottery_draw_contestants`
    WHERE lottery_draw_id = #{lottery_draw_id}
    AND user_id = #{user_id}
  </select>

  <select id="getAdvice" resultType="map">
    SELECT  *
    FROM `advice`
    LIMIT #{start},#{size}
  </select>


  <select id="getDrawId" resultType="string">
    SELECT  id
    FROM `lottery_draw`
    WHERE set_time = #{time}
  </select>

  <select id="attendWordChallengeInfo" resultType="map">
    SELECT *
    FROM `word_challenge_contestants`
    WHERE word_challenge_id = #{c_id}
    AND user_id = #{user_id}
  </select>

  <select id="findWordChallengeVirtualUser" resultType="map">
    SELECT id
    FROM `word_challenge_contestants`
    WHERE word_challenge_id = #{c_id}
    AND `virtual` = 1
  </select>

  <select id="findUserWhetherInvited" resultType="map">
    SELECT *
    FROM `word_challenge_invite_relation`
    WHERE user_id = #{user_id}
    AND word_challenge_id = #{word_challenge_id}
  </select>

  <select id="findWordChallengeInviter" resultType="map">
    SELECT *
    FROM `word_challenge_invite_relation`
    WHERE word_challenge_id = #{word_challenge_id}
  </select>

    <select id="showAllChallengeContestants" resultType="map">
        SELECT *
        FROM `word_challenge_contestants`
        WHERE word_challenge_id = #{word_challenge_id}
    </select>

  <select id="getUserWordChallengeRank" resultType="map">
    SELECT `user`.username,`user`.portrait,tb.*
    FROM `user`,
    (SELECT *
    FROM `word_challenge_contestants`
    WHERE word_challenge_id = #{c_id}) tb
    WHERE tb.user_id = `user`.id
    ORDER BY word_number DESC,id DESC
  </select>

  <select id="findTopInviteReward" resultType="map">
    SELECT username,portrait,invite_reward
    FROM `user`
    ORDER BY invite_reward DESC
    LIMIT 1
  </select>

  <select id="showTotalInviteReward" resultType="map">
    SELECT username,portrait,invite_reward,id as user_id
    FROM `user`
    ORDER BY invite_reward DESC,last_login DESC
  </select>

  <select id="getWordChallengeId" resultType="string">
    SELECT  id
    FROM `word_challenge`
    WHERE set_time = #{time}
  </select>

  <select id="getDrawName" resultType="string">
    SELECT  prize
    FROM `lottery_draw`
    WHERE set_time = #{time}
  </select>

  <select id="getVirtualWinner" resultType="map">
    SELECT  `virtual_user`.user_id as user_id
    FROM `virtual_user`,lottery_draw_contestants
    WHERE `virtual_user`.status = 0
    AND lottery_draw_contestants.user_id = `virtual_user`.user_id
    AND lottery_draw_contestants.lottery_draw_id = #{lottery_draw_id}
    order by rand() LIMIT #{number}
  </select>


  <select id="getLotteryDrawDescription" resultType="map" parameterType="string">
    SELECT prize,prize_pic,prize_tomorrow,prize_tomorrow_pic,set_time as end_time
    FROM lottery_draw
    WHERE set_time > #{now_time}
    ORDER BY abs(set_time- #{now_time}) ASC
    LIMIT 1
  </select>


  <select id="getLotteryDrawWinner" resultType="map" parameterType="string">
    SELECT table1.prize,table1.prize_pic,`user`.username,`user`.portrait
    FROM `user`,
    (SELECT user_id,tb.prize,prize_pic
    FROM lottery_draw_contestants,
    (SELECT id,prize,prize_pic
    FROM lottery_draw
    WHERE set_time &lt; #{now_time}
    ORDER BY abs(set_time - #{now_time}) ASC
    LIMIT 1) tb
    WHERE lottery_draw_contestants.lottery_draw_id = tb.id
    AND lottery_draw_contestants.status = 1) table1
    WHERE table1.user_id = `user`.id
    LIMIT 3
  </select>


  <select id="getLotteryDrawWinnerNumber" resultType="int" parameterType="string">
    SELECT count(lottery_draw_contestants.id)
    FROM lottery_draw_contestants,
         (SELECT id,prize,prize_pic
          FROM lottery_draw
          ORDER BY abs(set_time - #{now_time}) ASC
                   LIMIT 1) tb
    WHERE lottery_draw_contestants.lottery_draw_id = tb.id
    AND lottery_draw_contestants.status = 1
  </select>

  <select id="getNowPrize" resultType="string" parameterType="string">
    SELECT id
    FROM lottery_draw
    ORDER BY abs(set_time - #{now_time}) ASC
    LIMIT 1
  </select>

  <select id="countMedallionTimes" resultType="int" parameterType="string">
    SELECT count(1)
    FROM medallion
    WHERE user_id = #{user_id}
    AND word_challenge_contestants_id = #{word_challenge_contestants_id}
    AND flag = #{flag}
  </select>

  <select id="testMedallionWhetherAttend" resultType="int" parameterType="string">
    SELECT count(1)
    FROM medallion
    WHERE user_id = #{user_id}
    AND word_challenge_contestants_id = #{word_challenge_contestants_id}
    AND help_user_id = #{help_user_id}
  </select>

  <select id="getMedallionHelperPortrait" resultType="map" parameterType="string">
    SELECT portrait
    FROM `user`,
    (SELECT help_user_id
    FROM medallion
    WHERE user_id = #{user_id}
    AND word_challenge_contestants_id = #{word_challenge_contestants_id}
    AND flag = #{flag}) tb
    WHERE `user`.id = tb.help_user_id
  </select>


  <select id="getMyInviteWordChallenge" resultType="map" parameterType="string">
    SELECT word_challenge_contestants.insist_day,tb.reward,tb.user_id,tb.word_challenge_id
    FROM word_challenge_contestants,
    (SELECT *
    FROM `word_challenge_invite_relation`
    WHERE invited_user_id = #{user_id}) tb
    WHERE tb.word_challenge_id = word_challenge_contestants.word_challenge_id
    AND tb.user_id = word_challenge_contestants.user_id
  </select>

  <select id="showUserBill" resultType="map" parameterType="string">
    SELECT statement,set_time,bill
    FROM bill
    WHERE user_id = #{user_id}
    ORDER BY set_time DESC
  </select>

  <select id="adminShowWithDrawCash" resultType="map">
    SELECT `user`.id as user_id,username,portrait,wechat,phone,tb.*
    FROM `user`,
    (SELECT *
    FROM withdraw_cash
    ORDER BY `whether_pay` ASC
    LIMIT #{start},#{size}) tb
    WHERE tb.user_id = `user`.id
  </select>

  <select id="findWithDrawCash" resultType="map">
    SELECT *
    FROM withdraw_cash
    WHERE id = #{id}
  </select>

  <select id="whetherWithDrawing" resultType="map">
    SELECT money
    FROM withdraw_cash
    WHERE user_id = #{user_id}
    AND whether_pay = 0
    LIMIT 1
  </select>

  <select id="show_word_challenge" resultType="map" parameterType="string">
    SELECT *
    FROM word_challenge
    WHERE word_challenge.upper_limit > word_challenge.enrollment
    AND word_challenge.st > #{now_time}
    ORDER BY word_challenge.st ASC
    LIMIT 1
  </select>

  <select id="find_user_attend_challenge" resultType="map" parameterType="string">
    SELECT tb.*,word_challenge_contestants.insist_day,word_challenge_contestants.word_number,word_challenge_contestants.medallion,word_challenge_contestants.last_medallion_time,word_challenge_contestants.id as word_challenge_contestants_id
    FROM word_challenge_contestants,
    (SELECT *
    FROM word_challenge
    WHERE word_challenge.et > #{now_time}) tb
    WHERE word_challenge_contestants.word_challenge_id = tb.id
    AND word_challenge_contestants.user_id = #{user_id}
    LIMIT 1
  </select>


  <select id="findClockWordChallenge" resultType="map" parameterType="string">
    SELECT word_challenge.id
    FROM word_challenge,
    (SELECT *
    FROM word_challenge_contestants
    WHERE user_id = #{user_id}) tb
    WHERE tb.word_challenge_id = word_challenge.id
    AND word_challenge.et > #{now_time}
    AND word_challenge.st &lt; #{now_time}
    LIMIT 1
  </select>

  <select id="findCanAttendWordChallenge" resultType="map" parameterType="string">
    SELECT *
    FROM word_challenge
    WHERE word_challenge.st > #{now_time}
    LIMIT 1
  </select>

  <select id="find_user_whether_success_challenge" resultType="int" parameterType="string">
    SELECT count(1)
    FROM word_challenge_contestants,
         (SELECT *
          FROM word_challenge
          WHERE word_challenge.et &lt; #{now_time}) tb
    WHERE word_challenge_contestants.word_challenge_id = tb.id
    AND word_challenge_contestants.user_id = #{user_id}
    AND word_challenge_contestants.insist_day >= 28
  </select>



  <!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
  <!--这里是阅读挑战的sql代码-->
  <select id="showReadClass" resultType="map" parameterType="string">
    SELECT *
    FROM read_class
    WHERE read_class.eroll_st &lt; #{now_time}
    AND read_class.st > #{now_time}
    ORDER BY read_class.st ASC
    LIMIT 1
  </select>

  <select id="showReadClassReserved" resultType="map" parameterType="string">
    SELECT *
    FROM read_class
    WHERE read_class.eroll_st > #{now_time}
    ORDER BY read_class.eroll_st ASC
    LIMIT 1
  </select>

  <select id="countReadClassReserved" resultType="int" parameterType="string">
    SELECT count(id)
    FROM read_class_reserved
    WHERE read_class_id = #{read_class_id}
  </select>

  <select id="showReadClassSeries" resultType="map" parameterType="string">
    SELECT tb2.*,read_class_book.*,read_class_book.`name` as book_name
    FROM read_class_book,
    (SELECT tb.name,tb.id as series_id,tb.word_number_need,read_class_series_book.book_id
    FROM read_class_series_book,
    (SELECT *
    FROM read_class_series
    WHERE read_class_series.read_class_id = #{read_class_id}) tb
    WHERE read_class_series_book.series_id = tb.id) tb2
    WHERE read_class_book.id = tb2.book_id
  </select>

  <select id="showSelectBeginReadClassSeries" resultType="map" parameterType="string">
    SELECT tb2.*,read_class.*
    FROM read_class,
         (SELECT read_class_series.name,read_class_series.read_class_id,read_class_series.id as series_id
          FROM read_class_series,
               (SELECT series_id
                FROM read_class_contestants
                WHERE read_class_contestants.user_id = #{user_id}) tb
          WHERE read_class_series.id = tb.series_id) tb2
    WHERE read_class.id = tb2.read_class_id
    AND read_class.eroll_st &lt; #{now_time}
    AND et > #{now_time}
    LIMIT 1
  </select>

  <select id="showSelectEndReadClassSeries" resultType="map" parameterType="string">
    SELECT tb2.*,read_class.*
    FROM read_class,
         (SELECT read_class_series.name,read_class_series.read_class_id,read_class_series.id as series_id
          FROM read_class_series,
               (SELECT series_id
                FROM read_class_contestants
                WHERE read_class_contestants.user_id = #{user_id}) tb
          WHERE read_class_series.id = tb.series_id) tb2
    WHERE read_class.id = tb2.read_class_id
    AND et &lt; #{now_time}
  </select>

  <select id="showSelectBeginReadClassSeriesHelp" resultType="map" parameterType="string">
    SELECT tb2.*,read_class.*
    FROM read_class,
         (SELECT read_class_series.name,read_class_series.read_class_id,read_class_series.id as series_id
          FROM read_class_series,
               (SELECT series_id
                FROM read_class_help_sign_up
                WHERE read_class_help_sign_up.user_id = #{user_id}) tb
          WHERE read_class_series.id = tb.series_id) tb2
    WHERE read_class.id = tb2.read_class_id
    AND read_class.eroll_st &lt; #{now_time}
    AND et > #{now_time}
    LIMIT 1
  </select>

  <select id="showReadClassSeriesTeacher" resultType="map" parameterType="string">
    SELECT qr_code
    FROM read_class_teacher
    WHERE read_class_teacher.series_id = #{series_id}
  </select>


  <select id="selectReadClassContestants" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_contestants
    WHERE read_class_contestants.series_id = #{series_id}
    AND read_class_contestants.user_id = #{user_id}
  </select>

  <select id="showSeriesReadClass" resultType="map" parameterType="string">
    SELECT  read_class.*,tb.*
    FROM read_class,
    (SELECT `name` as series, read_class_id, word_number_need, id as series_id
    FROM read_class_series
    WHERE read_class_series.id = #{series_id}) tb
    WHERE read_class.id = tb.read_class_id
  </select>

  <select id="getReadClassSeriesById" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_series
    WHERE read_class_series.id = #{series_id}
  </select>

  <select id="showReadClassBookIntroduction" resultType="map" parameterType="string">
    SELECT pic,`name`,author,introduction
    FROM read_class_book
    WHERE read_class_book.id = #{book_id}
  </select>

  <select id="checkReadChallengeHelpAttend" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_help_sign_up
    WHERE read_class_help_sign_up.user_id = #{user_id}
    AND is_effective = 0
    ORDER BY set_time DESC
    LIMIT 1
  </select>

  <select id="selectSeriesIdByHelpId" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_help_sign_up
    WHERE id = #{id}
  </select>

  <select id="getUserLastClockReadChapterAndBookInfo" resultType="map" parameterType="string">
    SELECT read_class_book.*,tb.*
    FROM read_class_book,
    (SELECT book_id,chapter_id,set_time,id as tb_id
    FROM read_class_clock_in
    WHERE series_id = #{series_id}
    AND user_id = #{user_id}) tb
    WHERE read_class_book.id = tb.book_id
    ORDER BY tb.set_time DESC,tb.tb_id DESC
  </select>

  <select id="getSeriesBookAndChapter" resultType="map" parameterType="string">
    SELECT read_class_book.`name` as book_name,pic,author,tb2.*
    FROM read_class_book,
         (SELECT read_class_chapter.*,tb.*,read_class_chapter.`order` as chapter_order,read_class_chapter.id as chapter_id
          FROM read_class_chapter,
               (SELECT book_id as b_id,`order` as book_order
                FROM read_class_series_book
                WHERE series_id = #{series_id}
                ORDER BY `book_order`) tb
          WHERE tb.b_id = read_class_chapter.book_id) tb2
    WHERE tb2.b_id = read_class_book.id
  </select>

  <select id="getReadClassHelper" resultType="map" parameterType="string">
    SELECT username,portrait
    FROM `user`,
    (SELECT *
    FROM read_class_help
    WHERE read_class_help.help_sign_up_id = #{help_sign_up_id}) tb
    WHERE `user`.id = tb.helper_id
  </select>

  <select id="getReadClassHelperInfo" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_help
    WHERE read_class_help.help_sign_up_id = #{help_sign_up_id}
  </select>

  <select id="getChapterInfoByChapterId" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_chapter
    WHERE read_class_chapter.id = #{chapter_id}
  </select>

  <select id="getChapterNewWord" resultType="map" parameterType="string">
    SELECT word,mean,symbol_mp3,symbol
    FROM read_class_new_word
    WHERE read_class_new_word.chapter_id = #{chapter_id}
    AND read_class_new_word.book_id = #{book_id}
  </select>

  <select id="getBookNewWord" resultType="map" parameterType="string">
    SELECT `order`,tb2.*
    FROM read_class_chapter,
    (SELECT word,mean,symbol_mp3,symbol,tb.*
    FROM read_class_new_word,
      (SELECT chapter_id,book_id
      FROM read_class_clock_in
      WHERE read_class_clock_in.book_id = #{book_id}
      AND user_id = #{user_id}) tb
    WHERE read_class_new_word.`chapter_id` =  tb.`chapter_id`
    AND read_class_new_word.book_id =  tb.book_id) tb2
    WHERE tb2.chapter_id = read_class_chapter.id
  </select>

  <select id="getChapterInner" resultType="map" parameterType="string">
    SELECT en,cn,`order`
    FROM read_class_chapter_inner
    WHERE read_class_chapter_inner.chapter_id = #{chapter_id}
  </select>

  <select id="checkReadClassClockIn" resultType="map" parameterType="string">
    SELECT *
    FROM read_class_clock_in
    WHERE series_id = #{series_id}
    AND book_id = #{book_id}
    AND user_id = #{user_id}
    AND chapter_id = #{chapter_id}
  </select>

  <select id="getReadClassRedPacket" resultType="map" parameterType="string">
    SELECT read_class_red_packet,read_class_red_packet_time,read_class_red_packet_book_id,read_class_red_packet_chapter_id,read_class_red_packet_series_id
    FROM `user`
    WHERE id = #{user_id}
  </select>

  <select id="getBookInfoAndChapterInfoByChapterId" resultType="map" parameterType="string">
    SELECT `read_class_book`.name as book_name,`read_class_chapter`.name as chapter_name
    FROM `read_class_book`,`read_class_chapter`
    WHERE `read_class_chapter`.id = #{chapter_id}
    AND `read_class_chapter`.book_id = `read_class_book`.id
  </select>

  <select id="readClassBookAll" resultType="map">
    SELECT tb.*,tb2.*
    FROM
    (SELECT count(*) as chapter_number,book_id
    FROM read_class_chapter
    GROUP BY book_id) tb,
    (SELECT *
    FROM read_class_book
    LIMIT #{start},#{size}) tb2
    WHERE tb.book_id = tb2.id
  </select>

  <select id="readClassBookChapterAll" resultType="map">
    SELECT *
    FROM read_class_chapter
    WHERE read_class_chapter.book_id = #{book_id}
  </select>

  <select id="getInsertChapterId" resultType="map">
    SELECT *
    FROM read_class_chapter
    WHERE read_class_chapter.mp3 = #{mp3}
  </select>

  <select id="showReadClassAdmin" resultType="map">
    SELECT *
    FROM `read_class`
    ORDER BY et DESC
    LIMIT #{start},#{size}
  </select>

  <select id="readClassBookChapterInnerAll" resultType="map">
    SELECT *
    FROM read_class_chapter_inner
    WHERE read_class_chapter_inner.chapter_id = #{chapter_id}
    ORDER BY `order`
  </select>

  <select id="showReadClassIntroductionPic" resultType="map">
    SELECT *
    FROM read_class_introduction_pic
  </select>

  <select id="checkExistReserved" resultType="map">
    SELECT *
    FROM read_class_reserved
    WHERE user_id = #{user_id}
    LIMIT 1
  </select>

  <select id="readClassBookChapterNewWordAll" resultType="map">
    SELECT *
    FROM read_class_new_word
    WHERE read_class_new_word.chapter_id = #{chapter_id}
  </select>

  <insert id="insertReadChallengeContestantsReal" parameterType="string">
    INSERT INTO read_class_contestants (user_id,series_id,set_time,`virtual`,`insist_day`,`whether_help`)
    values (#{user_id},#{series_id},#{set_time},0,0,1)
  </insert>

  <insert id="insertReadChallengeHelp" parameterType="string">
    INSERT INTO read_class_help (user_id,help_sign_up_id,helper_id)
    values (#{user_id},#{help_sign_up_id},#{helper_id})
  </insert>

  <insert id="insertReadChallengeContestantsHelp" parameterType="string">
    INSERT INTO read_class_help_sign_up (user_id,series_id,set_time)
    values (#{user_id},#{series_id},#{set_time})
  </insert>

  <insert id="insertReadChallengeReserved" parameterType="string">
    INSERT INTO read_class_reserved (user_id,series_id,set_time)
    values (#{user_id},#{series_id},#{set_time})
  </insert>


  <insert id="insertReadClassChapter" parameterType="string">
    INSERT INTO read_class_chapter (`name`,`order`,book_id,mp3)
    values (#{name},#{order},#{book_id},#{mp3})
  </insert>

  <insert id="insertReadClassChapterInner" parameterType="string">
    INSERT INTO read_class_chapter_inner (`en`,`cn`,`order`,chapter_id)
    values (#{en},#{cn},#{order},#{chapter_id})
  </insert>

  <insert id="insertReadChallengeClockIn" parameterType="string">
    INSERT INTO read_class_clock_in (series_id,book_id,user_id,chapter_id,set_time)
    values (#{series_id},#{book_id},#{user_id},#{chapter_id},#{set_time})
  </insert>

  <insert id="insertReadChallengeNewWord" parameterType="string">
    INSERT INTO read_class_new_word (word,mean,symbol,symbol_mp3,book_id,chapter_id)
    values (#{word},#{mean},#{symbol},#{symbol_mp3},#{book_id},#{chapter_id})
  </insert>

  <update id="changeReadClassEnrollment">
    UPDATE read_class
    set `enrollment` = enrollment + 1
    WHERE read_class.id = #{read_class_id}
  </update>


  <update id="changeReadClassInsistDay">
    UPDATE read_class_contestants
    set `insist_day` = insist_day + 1
    WHERE read_class_contestants.series_id = #{series_id}
    AND read_class_contestants.user_id = #{user_id}
  </update>


  <update id="changeReadClassHelpStatus">
    UPDATE read_class_help_sign_up
    set `is_effective` = #{is_effective}
    WHERE read_class_help_sign_up.user_id = #{user_id}
    AND is_effective = 0
  </update>

    <update id="changeReadClassRedPacket">
    UPDATE `user`
    set `read_class_red_packet` = #{read_class_red_packet},
        `read_class_red_packet_time` = #{read_class_red_packet_time},
        `read_class_red_packet_book_id` = #{read_class_red_packet_book_id},
        `read_class_red_packet_series_id` = #{read_class_red_packet_series_id},
        `read_class_red_packet_chapter_id` = #{read_class_red_packet_chapter_id}
    WHERE id = #{user_id}
    </update>

    <update id="getReadClassRedPack">
    UPDATE `user`
    set `bill` = `bill` + #{bill},
        `read_class_red_packet_book_id` = null,
        `read_class_red_packet_chapter_id` = null,
        `read_class_red_packet_time` = null,
        `read_class_red_packet_series_id` = null,
        `read_class_red_packet` = #{read_class_red_packet}
    WHERE id = #{id}
    </update>


    <update id="updateReadClassBookIntroduction" parameterType="string">
        UPDATE `read_class_book` SET
        `introduction`=#{introduction}
        WHERE id = #{id}
    </update>

    <update id="updateReadClassBookAuthor" parameterType="string">
        UPDATE `read_class_book` SET
            `author`=#{author}
        WHERE id = #{id}
    </update>

    <update id="updateReadClassBookChapterOrder" parameterType="string">
        UPDATE `read_class_chapter` SET
            `order`=#{order}
        WHERE id = #{id}
    </update>

    <update id="updateReadBookPic" parameterType="string">
        UPDATE `read_class_book` SET
            `pic`= #{pic}
        WHERE id = #{id}
    </update>

    <update id="updateReadBookMP3" parameterType="string">
        UPDATE `read_class_chapter` SET
            `mp3`= #{mp3}
        WHERE id = #{id}
    </update>

    <delete id="deleteReadClassChapterNewWord" parameterType="string" >
        DELETE FROM `read_class_new_word`
        WHERE id = #{id}
    </delete>

    <delete id="deleteChapterNewWord" parameterType="string" >
        DELETE FROM `read_class_new_word`
        WHERE chapter_id = #{chapter_id}
    </delete>

    <delete id="deleteChapterInner" parameterType="string" >
        DELETE FROM `read_class_chapter_inner`
        WHERE chapter_id = #{chapter_id}
    </delete>

    <delete id="deleteChapter" parameterType="string" >
        DELETE FROM `read_class_chapter`
        WHERE id = #{id}
    </delete>

  <!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->



  <update id="changeDailyFinishWork">
    UPDATE data_info
    set `daily_finish_work` = daily_finish_work + #{daily_finish_work}
    WHERE set_time = #{set_time}
  </update>

  <update id="changeUserRemind">
    UPDATE `user`
    set `whether_reminder` = #{whether_reminder}
    WHERE id = #{id}
  </update>

  <update id="WordChallengeUserChangeToSuccess">
    UPDATE `word_challenge_contestants`
    set `reward` = #{reward}
    WHERE id = #{id}
  </update>

  <update id="makeWordChallengeRedPacket">
    UPDATE `user`
    set `whether_challenge_success` = #{whether_challenge_success},
    `challenge_red_packet` = #{challenge_red_packet},
    `challenge_success_id` = #{challenge_success_id}
    WHERE id = #{id}
  </update>

  <update id="getWordChallengeRedPack">
    UPDATE `user`
    set `bill` = `bill` + #{bill},
    `whether_challenge_success` = #{whether_challenge_success},
    `challenge_red_packet` = #{challenge_red_packet}
    WHERE id = #{id}
  </update>

  <update id="dailyAddVirtualUserWordNumber">
    UPDATE `word_challenge_contestants`
    set `word_number` = `word_number` + #{word_number}
    WHERE id = #{id}
  </update>

  <update id="withDrawChangeUserBill">
    UPDATE `user`
    set `bill` = `bill` + #{bill}
    WHERE id = #{user_id}
  </update>

  <update id="getWordChallengeInviteRedPack">
    UPDATE `user`
    set `bill` = `bill` + #{bill},
    `whether_invite_challenge_success` = #{whether_invite_challenge_success},
    `invite_challenge_red_packet` = #{invite_challenge_red_packet}
    WHERE id = #{id}
  </update>

  <update id="changeWordChallengeFailNormal">
    UPDATE `user`
    set `whether_challenge_fail` = #{whether_challenge_fail}
    WHERE id = #{id}
  </update>

  <update id="makeInviteWordChallengeRedPacket">
    UPDATE `user`
    set `whether_invite_challenge_success` = #{whether_invite_challenge_success},
    `invite_challenge_red_packet` = `invite_challenge_red_packet` + #{invite_challenge_red_packet},
    `invite_reward` = `invite_reward` + #{invite_reward}
    WHERE id = #{id}
  </update>


  <update id="makeUserChallengeFail">
    UPDATE `user`
    set `whether_challenge_fail` = #{whether_challenge_fail}
    WHERE id = #{id}
  </update>

  <update id="settleAccounts">
    UPDATE `word_challenge`
    set `aggregate_amount` = #{aggregate_amount},
    `profit_loss` = #{profit_loss},
    `success_people` = #{success_people},
    `success_rate` = #{success_rate},
    `reward_each` = #{reward_each},
    `loser` = #{loser},
    `invite_success` = #{invite_success},
    `whether_settle_accounts` = #{whether_settle_accounts}
    WHERE id = #{id}
  </update>

  <update id="cancelChallengeConfirm">
    UPDATE `word_challenge`
    set `final_confirm` = #{final_confirm}
    WHERE id = #{id}
  </update>

  <update id="changeUserTemplateOpen">
    UPDATE `user`
    set `whether_template` = 1
    WHERE id = #{id}
  </update>

  <update id="changeVirtualStatus">
    UPDATE `virtual_user`
    set `status` = 1
    WHERE user_id = #{id}
  </update>

  <update id="changeVirtualStatusNot">
    UPDATE `virtual_user`
    set `status` = 0
    WHERE user_id = #{id}
  </update>

  <update id="changeWordChallengeVirtualNumber">
    UPDATE `word_challenge`
    set `virtual_number` = #{virtual_number}
    WHERE id = #{id}
  </update>


  <update id="adminChangeUserUsername">
    UPDATE `user`
    set `username` = #{username}
    WHERE id = #{id}
  </update>

  <update id="changeWordChallengeEnroll">
    UPDATE `word_challenge`
    set `enrollment` = `enrollment` + 1
    WHERE id = #{word_challenge_id}
  </update>

  <update id="changeWithDrawCashStatus">
    UPDATE `withdraw_cash`
    set `whether_pay` = #{whether_pay}
    WHERE id = #{id}
  </update>

  <update id="addChallengeInsistDay">
    UPDATE `word_challenge_contestants`
    set `insist_day` = `insist_day` + 1,
    medallion = medallion + 1,
    last_medallion_time = #{last_medallion_time}
    WHERE id = #{word_challenge_contestants_id}
    AND user_id = #{user_id}
  </update>

  <update id="addNormalChallengeInsistDay">
    UPDATE `word_challenge_contestants`
    set `insist_day` = `insist_day` + 1
    WHERE word_challenge_id = #{word_challenge_id}
    AND user_id = #{user_id}
  </update>

  <update id="addNormalChallengeWordNumber">
    UPDATE `word_challenge_contestants`
    set `word_number` = `word_number` + #{word_number}
    WHERE word_challenge_id = #{word_challenge_id}
    AND user_id = #{user_id}
  </update>

    <update id="wordChallengeInviteChangeToSuccess">
        UPDATE `word_challenge_invite_relation`
        set `reward` = #{reward},
            `is_success` = #{is_success}
        WHERE word_challenge_id = #{word_challenge_id}
        AND user_id = #{user_id}
    </update>

  <update id="changeUserTemplateClose">
    UPDATE `user`
    set `whether_template` = 0,
    `whether_reminder` = 0
    WHERE id = #{id}
  </update>

  <update id="addVirtualInviteData">
    UPDATE `user`
    set `invite_reward` = `invite_reward` + #{invite_reward}
    WHERE id = #{id}
  </update>

  <update id="changeTopWelfareService" parameterType="string">
    UPDATE welfare_service,(SELECT MAX(`order`) as number FROM welfare_service) tb
    set `order` = tb.number+1
    WHERE id = #{id}
  </update>

  <delete id="deleteFeedsReply" parameterType="string" >
    DELETE FROM `feeds_reply_comments`
    WHERE feeds_comment_id IN
    (SELECT id FROM feeds_comment
    where feeds_id = #{id})
  </delete>

  <delete id="deleteFeedsCommentLikes" parameterType="string" >
    DELETE FROM `feeds_comment_like`
    WHERE feeds_comment_id IN
    (SELECT id FROM feeds_comment
    where feeds_id = #{id})
  </delete>

  <delete id="deleteFeedsComment" parameterType="string" >
    DELETE FROM feeds_comment
    where feeds_id = #{id}
  </delete>

  <delete id="deleteFeedsFavour" parameterType="string" >
    DELETE FROM feeds_favour
    where feeds_id = #{id}
  </delete>

  <delete id="deleteFeedsLike" parameterType="string" >
    DELETE FROM feeds_like
    where feeds_id = #{id}
  </delete>

  <delete id="deleteFeedsInner" parameterType="string" >
    DELETE FROM feeds_inner
    where feeds_id = #{id}
  </delete>

  <delete id="deleteWinVirtual">
    DELETE FROM virtual_user
    where status = 1
  </delete>

  <delete id="deleteDrawVirtualUser" parameterType="string" >
    DELETE FROM lottery_draw_contestants
    where user_id = #{id}
  </delete>

  <delete id="deleteFeeds" parameterType="string" >
    DELETE FROM feeds
    where id = #{id}
  </delete>

  <delete id="deleteBill" parameterType="string" >
    DELETE FROM bill
    where user_id = #{user_id}
    AND with_draw_cash_id = #{with_draw_cash_id}
  </delete>

  <delete id="deleteTemplateMsg" parameterType="string" >
    DELETE FROM template_msg
    where id = #{id}
  </delete>

  <delete id="deleteFeedsReplyLike" parameterType="string" >
    DELETE FROM `feeds_reply_comment_like`
    WHERE feeds_reply_comment_id IN
    (SELECT id
    FROM `feeds_reply_comments`
    WHERE feeds_comment_id IN
    (SELECT id FROM feeds_comment
    where feeds_id = #{id}))
  </delete>
</mapper>