<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yj.dao.Reciting_wordsMapper" >
  <resultMap id="BaseResultMap" type="com.yj.pojo.Reciting_words" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="word_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="word" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="meaning" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="level" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="plan" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="real_meaning" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="meaning_Mumbler" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="set_time" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, word_id, user_id, word, meaning, level, plan, real_meaning, meaning_Mumbler, 
    set_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from reciting_words
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from reciting_words
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yj.pojo.Reciting_words" >
    insert into reciting_words (id, word_id, user_id, 
      word, meaning, level, 
      plan, real_meaning, meaning_Mumbler, 
      set_time)
    values (#{id,jdbcType=INTEGER}, #{wordId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{word,jdbcType=VARCHAR}, #{meaning,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, 
      #{plan,jdbcType=VARCHAR}, #{realMeaning,jdbcType=VARCHAR}, #{meaningMumbler,jdbcType=VARCHAR}, 
      #{setTime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yj.pojo.Reciting_words" >
    insert into reciting_words
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="wordId != null" >
        word_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="word != null" >
        word,
      </if>
      <if test="meaning != null" >
        meaning,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="plan != null" >
        plan,
      </if>
      <if test="realMeaning != null" >
        real_meaning,
      </if>
      <if test="meaningMumbler != null" >
        meaning_Mumbler,
      </if>
      <if test="setTime != null" >
        set_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="wordId != null" >
        #{wordId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="word != null" >
        #{word,jdbcType=VARCHAR},
      </if>
      <if test="meaning != null" >
        #{meaning,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="plan != null" >
        #{plan,jdbcType=VARCHAR},
      </if>
      <if test="realMeaning != null" >
        #{realMeaning,jdbcType=VARCHAR},
      </if>
      <if test="meaningMumbler != null" >
        #{meaningMumbler,jdbcType=VARCHAR},
      </if>
      <if test="setTime != null" >
        #{setTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yj.pojo.Reciting_words" >
    update reciting_words
    <set >
      <if test="wordId != null" >
        word_id = #{wordId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="word != null" >
        word = #{word,jdbcType=VARCHAR},
      </if>
      <if test="meaning != null" >
        meaning = #{meaning,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="plan != null" >
        plan = #{plan,jdbcType=VARCHAR},
      </if>
      <if test="realMeaning != null" >
        real_meaning = #{realMeaning,jdbcType=VARCHAR},
      </if>
      <if test="meaningMumbler != null" >
        meaning_Mumbler = #{meaningMumbler,jdbcType=VARCHAR},
      </if>
      <if test="setTime != null" >
        set_time = #{setTime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yj.pojo.Reciting_words" >
    update reciting_words
    set word_id = #{wordId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      word = #{word,jdbcType=VARCHAR},
      meaning = #{meaning,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      plan = #{plan,jdbcType=VARCHAR},
      real_meaning = #{realMeaning,jdbcType=VARCHAR},
      meaning_Mumbler = #{meaningMumbler,jdbcType=VARCHAR},
      set_time = #{setTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>



  <!-- *****************************************懂词帝小游戏相关************************************************** -->
  <select id="gameHomePageUserInfo" parameterType="string" resultType="map">
    SELECT plans.plan,plans.dictionary_type,tb.*
    FROM plans,
       (
          SELECT game_plan,game_exp,game_vit,game_last_online_time,game_last_login
          FROM `user`
          WHERE `id` = #{id}
          LIMIT 1
         )tb
    WHERE plans.dictionary_type = tb.game_plan
  </select>

  <select id="getGameHomePageNPCSay" resultType="map" parameterType="int">
    SELECT msg
    FROM `game_npc_say`
    order by rand() limit #{size}
  </select>


  <select id="getGameShare" resultType="map" parameterType="int">
    SELECT txt,pic
    FROM `game_share`
    order by rand() limit 1
  </select>

  <select id="getUserExpById" resultType="map" parameterType="string">
    SELECT username,portrait,game_exp,game_present_month_exp
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="getUserOnlineExpById" resultType="map" parameterType="string">
    SELECT game_online_record_time,game_today_receive_online_exp_times,game_exp
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="checkUser" resultType="map" parameterType="string">
    SELECT `id`
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="getUserDailyExpById" resultType="map" parameterType="string">
    SELECT game_today_receive_daily_exp_times,game_daily_record_time
    FROM `user`
    WHERE id = #{id}
  </select>

  <select id="getGameUserTakeInAllPlan" resultType="map" parameterType="string">
    SELECT stage,tb2.*
    FROM game_take_plan,
        (
          SELECT plans.id,plans.plan,plans.dictionary_type
          FROM plans,
               (
                 SELECT `id` FROM plan_types
               ) tb
          WHERE tb.id = plans.type_id
        ) tb2
    WHERE game_take_plan.user_id = #{user_id}
    AND game_take_plan.dictionary_type = tb2.id
  </select>

  <select id="getGameAllPlanNotInUserTake" resultType="map" parameterType="string">
    SELECT plans.id,plans.plan,plans.dictionary_type
    FROM plans,
         (
           SELECT `id`
           FROM plan_types
         ) tb
    WHERE tb.id = plans.type_id
    AND plans.`id` NOT IN
        (
          SELECT dictionary_type
          FROM game_take_plan
          WHERE game_take_plan.user_id = #{user_id}
        )
  </select>

  <select id="getGameUserTakePlanSituation" resultType="map" parameterType="string">
      SELECT *
      FROM game_take_plan
      WHERE game_take_plan.user_id = #{user_id}
      AND game_take_plan.dictionary_type = #{dictionary_type}
      LIMIT 1
  </select>

  <select id="getDictionaryByDictionaryType" parameterType="string" resultType="map">
    SELECT word,meaning
    FROM dictionary
    WHERE `type` = #{type}
  </select>

  <select id="gamePkField" parameterType="string" resultType="map">
    SELECT `name`,exp
    FROM game_pk_field
  </select>

  <select id="gameIsSetRelationship" parameterType="string" resultType="map">
    SELECT id
    FROM game_pk_relationship
    WHERE user_id = #{user_id}
    AND enemy_id = #{enemy_id}
    AND pk_id = #{pk_id}
    LIMIT 1
  </select>

  <select id="getUserRank" parameterType="string" resultType="map">
    SELECT rank,rank_exp,lv
    FROM game_rank
    WHERE rank_exp &lt;= #{rank_exp}
    ORDER BY rank_exp DESC
    LIMIT 1
  </select>


  <select id="getAllRank" parameterType="string" resultType="map">
    SELECT rank,rank_exp,lv
    FROM game_rank
    ORDER BY rank_exp ASC
  </select>

  <select id="getTopGameExpUser" parameterType="string" resultType="map">
    SELECT id,game_exp
    FROM `user`
    WHERE `wechat_game_openid` is not NULL
    ORDER BY game_exp + 0 ASC
    LIMIT 1000
  </select>

  <select id="getTopGamePresentMonthExpUser" parameterType="string" resultType="map">
    SELECT id,game_present_month_exp
    FROM `user`
    WHERE `wechat_game_openid` is not NULL
    ORDER BY game_present_month_exp ASC
    LIMIT 1000
  </select>

  <select id="getGameRankInfo" resultType="map">
    SELECT rank,rank_exp,lv
    FROM game_rank
    ORDER BY rank_exp ASC
  </select>

  <select id="getUserWorldRank" resultType="map">
    SELECT id, username,portrait,game_exp
    FROM `user`
    ORDER BY game_exp + 0 DESC
    LIMIT #{start}, #{size}
  </select>

  <select id="getGameUser" resultType="map">
    SELECT id,game_present_month_exp
    FROM `user`
    WHERE wechat_game_openid is not null
  </select>

  <select id="getUserChallengeRank" resultType="map">
    SELECT id, username,portrait,game_present_month_exp
    FROM `user`
    WHERE wechat_game_openid is not null
    ORDER BY game_present_month_exp + 0 DESC
    LIMIT #{start}, #{size}
  </select>


  <select id="gameJudgeHasRedPacket" resultType="map">
    SELECT reward
    FROM `game_challenge_red_packet`
    WHERE `game_challenge_red_packet`.user_id = #{id}
    AND `game_challenge_red_packet`.et = #{time}
    AND `game_challenge_red_packet`.wheather_gain = 0
    LIMIT 1
  </select>


  <select id="gameVirtualUserGameIsExist" resultType="map">
    SELECT user_id
    FROM `virtual_user_game`
    WHERE user_id = #{id}
    LIMIT 1
  </select>

  <update id="gameSelectPlan" parameterType="string">
    UPDATE `user`
    SET `game_plan` = #{game_plan}
    WHERE id = #{id}
  </update>


  <update id="gameRecordLoginTime" parameterType="string">
    UPDATE `user`
    SET `game_last_login` = #{game_last_login}
    WHERE id = #{id}
  </update>

  <update id="gameOnlineExpTimesSetZero" parameterType="string">
    UPDATE `user`
    SET `game_today_receive_online_exp_times` = #{game_today_receive_online_exp_times}
    WHERE id = #{id}
  </update>

  <update id="gameDailyExpTimesSetZero" parameterType="string">
    UPDATE `user`
    SET `game_today_receive_daily_exp_times` = #{game_today_receive_daily_exp_times}
    WHERE id = #{id}
  </update>

  <update id="gameOnlineExpTimesAdd" parameterType="string">
    UPDATE `user`
    SET `game_today_receive_online_exp_times` = #{game_today_receive_online_exp_times},
        `game_online_record_time` = #{game_online_record_time}
    WHERE id = #{id}
  </update>

  <update id="gameDailyExpTimesAdd" parameterType="string">
    UPDATE `user`
    SET `game_today_receive_daily_exp_times` = #{game_today_receive_daily_exp_times},
        `game_daily_record_time` = #{game_daily_record_time}
    WHERE id = #{id}
  </update>

  <update id="gameUpdateBill" parameterType="string">
    UPDATE `user`
    SET `bill` = #{bill}
    WHERE id = #{id}
  </update>

  <update id="gameAddExp" parameterType="string">
    UPDATE `user`
    SET `game_exp` = `game_exp` + #{game_exp},
        `game_present_month_exp` = `game_present_month_exp` + #{game_exp}
    WHERE id = #{id}
  </update>

  <update id="gameUpdateMonthExp" parameterType="string">
    UPDATE `user`
    SET `game_last_month_exp` = #{game_last_month_exp},
        `game_present_month_exp` = #{game_present_month_exp}
    WHERE id = #{id}
  </update>

  <update id="gameDecreaseExp" parameterType="string">
    UPDATE `user`
    SET `game_exp` = `game_exp` - #{game_exp},
        `game_present_month_exp` = `game_present_month_exp` - #{game_exp}
    WHERE id = #{id}
  </update>

  <update id="gameStageClear" parameterType="string">
    UPDATE `game_take_plan`
    SET `stage` = #{stage},
    `number_flag` = `number_flag` + #{number_flag}
    WHERE user_id = #{user_id}
    AND dictionary_type = #{dictionary_type}
  </update>

  <update id="gameChallengeOver" parameterType="string">
    UPDATE `game_month_challenge`
    SET `is_deliver` = 1
    WHERE `id` = #{id}
  </update>


  <update id="gameChangeRedPacketStatus" parameterType="string">
    UPDATE `game_challenge_red_packet`
    SET `wheather_gain` = 1
    WHERE `game_challenge_red_packet`.user_id = #{id}
    AND `game_challenge_red_packet`.et = #{time}
    AND `game_challenge_red_packet`.wheather_gain = 0
  </update>


  <update id="gameChangeWordListIndex" parameterType="string">
    UPDATE `game_take_plan`
    SET `number_flag` = `number_flag` + #{number_flag}
    WHERE user_id = #{user_id}
    AND dictionary_type = #{dictionary_type}
  </update>

  <update id="gameUserLogOutTimeSet" parameterType="string">
    UPDATE `user`
    SET `game_last_online_time` = #{game_last_online_time}
    WHERE id = #{id}
  </update>

  <update id="gamePkSettlement" parameterType="string">
    UPDATE `game_pk_relationship`
    SET `result` = #{result}
    WHERE user_id = #{user_id}
    AND enemy_id = #{enemy_id}
    AND pk_id = #{pk_id}
  </update>

  <insert id="gameInsertTakePlan">
    INSERT game_take_plan (user_id, dictionary_type, stage, number_flag, set_time)
    values (#{user_id},#{dictionary_type},#{stage},#{number_flag},#{set_time})
  </insert>

  <insert id="gameInsertRelationship">
    INSERT game_pk_relationship (user_id, enemy_id, pk_id, pay, set_time)
    values (#{user_id},#{enemy_id},#{pk_id},#{pay},#{set_time})
  </insert>

  <insert id="gameInsertChangeRedPacket">
    INSERT game_challenge_red_packet (user_id, st, et, wheather_gain, challenge_id, reward)
    values (#{user_id},#{st},#{et},#{wheather_gain},#{challenge_id}, #{reward})
  </insert>

  <!-- ********************************************************************************************************** -->
</mapper>